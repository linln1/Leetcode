class Solution {
public:
    vector< vector<int> > threeSum(vector<int>& nums) {
        int n = nums.size();
        vector< vector<int> > res;
        if (n < 3)
            return res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n - 2; i++)
        {
            if(i == 0 ||  (i > 0 && nums[i] != nums[i - 1]))
            {
                int left = i + 1, right = n - 1;
                int sum = 0 - nums[i];
                while(left < right)
                {
                    if(nums[left] + nums[right] == sum)
                    {
                        vector<int> vi;
                        vi.push_back(nums[i]);
                        vi.push_back(nums[left]);
                        vi.push_back(nums[right]);
                        res.push_back(vi);
                        while(left < right && nums[left] == nums[left + 1])
                            left++;
                        while(left < right && nums[right] == nums[right - 1])
                            right--;
                        left++;
                        right--;
                    }
                    else if(nums[left] + nums[right] < sum)
                        left++;
                    else
                        right--;
                }
            }
        }
        return res;
    }
};//C++

#python3
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        size = len(nums)
        nums.sort()   
        ans = []
        if size < 3:
            return ans
        i = 0
        while i<size and nums[i]<=0:
            left=i+1
            right=size-1
            sum = 0-nums[i]
            while left<right and left<size and right>=0:
                if (nums[left]+nums[right])>sum:
                    right=right-1
                elif (nums[left]+nums[right])<sum:
                    left=left+1
                elif (nums[left]+nums[right])==sum :
                    while left<right and nums[left]==nums[left+1] :
                        left+=1
                    while left<right and nums[right]==nums[right-1] :
                        right-=1
                    ans.append([nums[i],nums[left],nums[right]])
                    left = left+1
                    right = right-1              
            while i<size-1 and nums[i] == nums[i+1] :
                i=i+1
            i = i+1
        return ans
              
